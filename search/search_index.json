{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Peppux Framework Github: matmper/peppux Peppux is a web framework developed in PHP for personal studies. Requeriments for development Docker Docker Compose GNU make PHP ^8.3 (Optional, you can use it within Docker) Installation for development Clone repository, copy env and configure it: $ cp .env.example .env Start docker and run these commands: $ make build $ make up Use $ make up to start or $ make down to stop. The API will be available at http://localhost:80 by default. To change the port set the variable DOCKER_CONTAINER_PORT in your .env file.","title":"Home"},{"location":"#peppux-framework","text":"Github: matmper/peppux Peppux is a web framework developed in PHP for personal studies.","title":"Peppux Framework"},{"location":"#requeriments-for-development","text":"Docker Docker Compose GNU make PHP ^8.3 (Optional, you can use it within Docker)","title":"Requeriments for development"},{"location":"#installation-for-development","text":"Clone repository, copy env and configure it: $ cp .env.example .env Start docker and run these commands: $ make build $ make up Use $ make up to start or $ make down to stop. The API will be available at http://localhost:80 by default. To change the port set the variable DOCKER_CONTAINER_PORT in your .env file.","title":"Installation for development"},{"location":"commands/","text":"Commands Check the list of main commands for development environment. Make sure you have the GNU make dependency installed. - GNU make: Documentation Docker # Build docker images $ make build # Play docker images $ make up # Stop docker images $ make down # Kill docker images $ make kill # Access PHP docker image with tty $ make tty Composer # Install $ make composer-install # Update $ make composer update Code Check and Lint # Run php checks and tests $ make composer-check # Run php unit test $ make composer-tests # Run php stan check $ make composer-phpstan # Run php code sniffer check $ make composer-phpcs # Run php code beautiful and fixer $ make composer-phpcbf","title":"Commands"},{"location":"commands/#commands","text":"Check the list of main commands for development environment. Make sure you have the GNU make dependency installed. - GNU make: Documentation","title":"Commands"},{"location":"commands/#docker","text":"# Build docker images $ make build # Play docker images $ make up # Stop docker images $ make down # Kill docker images $ make kill # Access PHP docker image with tty $ make tty","title":"Docker"},{"location":"commands/#composer","text":"# Install $ make composer-install # Update $ make composer update","title":"Composer"},{"location":"commands/#code-check-and-lint","text":"# Run php checks and tests $ make composer-check # Run php unit test $ make composer-tests # Run php stan check $ make composer-phpstan # Run php code sniffer check $ make composer-phpcs # Run php code beautiful and fixer $ make composer-phpcbf","title":"Code Check and Lint"},{"location":"migration/","text":"Database Migrate Control your database and its versions through database migration. Use the resource to perform upgrades and downgrades of database updates. Create new migration file A new migration file must be created in the project, to do this run the command below: $ php peppux migrate:create name=\"CreateUsersTable\" A file will be created in folder database/Migrations with the name 20240101_120000_create_users_table.php . Edit this file and add your query inside the $this->migrate(...) methods. Each method must contain only a single query, a migration file can contain multiple method calls and they will be executed in sequences within a transaction. <?php namespace Database\\Migrations; use System\\Libraries\\Migration; return new class extends Migration { /** * Up migrations */ public function run(): void { $this->migrate(\"CREATE TABLE `users` ( `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, PRIMARY KEY `pk_id` (`id`) )\"); } /** * Rollback migrations */ public function rollback(): void { $this->migrate(\"DROP TABLE IF EXISTS `users`\"); } }; Running migrations With the necessary migration files created, run the command below to run all pending migrations. $ php peppux migrate Rollback migrations To perform a single version downgrade, use the command below. $ php peppux migrate:rollback If you downgrade one or more steps, enter the parameter steps . $ php peppux migrate:rollback steps=10","title":"Database Migration"},{"location":"migration/#database-migrate","text":"Control your database and its versions through database migration. Use the resource to perform upgrades and downgrades of database updates.","title":"Database Migrate"},{"location":"migration/#create-new-migration-file","text":"A new migration file must be created in the project, to do this run the command below: $ php peppux migrate:create name=\"CreateUsersTable\" A file will be created in folder database/Migrations with the name 20240101_120000_create_users_table.php . Edit this file and add your query inside the $this->migrate(...) methods. Each method must contain only a single query, a migration file can contain multiple method calls and they will be executed in sequences within a transaction. <?php namespace Database\\Migrations; use System\\Libraries\\Migration; return new class extends Migration { /** * Up migrations */ public function run(): void { $this->migrate(\"CREATE TABLE `users` ( `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, PRIMARY KEY `pk_id` (`id`) )\"); } /** * Rollback migrations */ public function rollback(): void { $this->migrate(\"DROP TABLE IF EXISTS `users`\"); } };","title":"Create new migration file"},{"location":"migration/#running-migrations","text":"With the necessary migration files created, run the command below to run all pending migrations. $ php peppux migrate","title":"Running migrations"},{"location":"migration/#rollback-migrations","text":"To perform a single version downgrade, use the command below. $ php peppux migrate:rollback If you downgrade one or more steps, enter the parameter steps . $ php peppux migrate:rollback steps=10","title":"Rollback migrations"},{"location":"query/","text":"Database Query Complete documentation for performing queries using the framework Query Builder. Soon...","title":"Database Query"},{"location":"query/#database-query","text":"Complete documentation for performing queries using the framework Query Builder. Soon...","title":"Database Query"}]}